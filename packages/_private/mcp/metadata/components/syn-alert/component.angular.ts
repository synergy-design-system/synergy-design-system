// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED @synergy-design-system/angular wrappers for @synergy-design-system/components
// Please do not edit this file directly!
// It will get recreated when running pnpm build.
// ---------------------------------------------------------------------
import {
  Component,
  ElementRef,
  NgZone,
  Input,
  Output,
  EventEmitter,
  AfterContentInit,
} from '@angular/core';
import type { SynAlert } from '@synergy-design-system/components';
import type { SynShowEvent } from '@synergy-design-system/components';
import type { SynAfterShowEvent } from '@synergy-design-system/components';
import type { SynHideEvent } from '@synergy-design-system/components';
import type { SynAfterHideEvent } from '@synergy-design-system/components';
import '@synergy-design-system/components/components/alert/alert.js';

/**
 * @summary Alerts are used to display important messages inline or as toast notifications.
 * @documentation https://synergy-design-system.github.io/?path=/docs/components-syn-alert--docs
 * @status stable
 * @since 2.0
 *
 * @dependency syn-icon-button
 *
 * @slot - The alert's main content.
 * @slot icon - An icon to show in the alert. Works best with `<syn-icon>`.
 *
 * @event syn-show - Emitted when the alert opens.
 * @event syn-after-show - Emitted after the alert opens and all animations are complete.
 * @event syn-hide - Emitted when the alert closes.
 * @event syn-after-hide - Emitted after the alert closes and all animations are complete.
 *
 * @csspart base - The component's base wrapper.
 * @csspart icon - The container that wraps the optional icon.
 * @csspart message - The container that wraps the alert's main content.
 * @csspart close-button - The close button, an `<syn-icon-button>`.
 * @csspart close-button__base - The close button's exported `base` part.
 *
 * @animation alert.show - The animation to use when showing the alert.
 * @animation alert.hide - The animation to use when hiding the alert.
 */
@Component({
  selector: 'syn-alert',
  standalone: true,
  template: '<ng-content></ng-content>',
})
export class SynAlertComponent {
  public nativeElement: SynAlert;
  private _ngZone: NgZone;

  constructor(e: ElementRef, ngZone: NgZone) {
    this.nativeElement = e.nativeElement;
    this._ngZone = ngZone;
    this.nativeElement.addEventListener('syn-show', (e: SynShowEvent) => {
      this.synShowEvent.emit(e);
    });
    this.nativeElement.addEventListener(
      'syn-after-show',
      (e: SynAfterShowEvent) => {
        this.synAfterShowEvent.emit(e);
      },
    );
    this.nativeElement.addEventListener('syn-hide', (e: SynHideEvent) => {
      this.synHideEvent.emit(e);
    });
    this.nativeElement.addEventListener(
      'syn-after-hide',
      (e: SynAfterHideEvent) => {
        this.synAfterHideEvent.emit(e);
      },
    );
  }

  /**
* Indicates whether or not the alert is open.
* You can toggle this attribute to show and hide the alert, or you can
use the `show()` and `hide()` methods and this attribute will reflect the alert's open state.
 */
  @Input()
  set open(v: '' | SynAlert['open']) {
    this._ngZone.runOutsideAngular(
      () => (this.nativeElement.open = v === '' || v),
    );
  }
  get open(): SynAlert['open'] {
    return this.nativeElement.open;
  }

  /**
   * Enables a close button that allows the user to dismiss the alert.
   */
  @Input()
  set closable(v: '' | SynAlert['closable']) {
    this._ngZone.runOutsideAngular(
      () => (this.nativeElement.closable = v === '' || v),
    );
  }
  get closable(): SynAlert['closable'] {
    return this.nativeElement.closable;
  }

  /**
   * The alert's theme variant.
   */
  @Input()
  set variant(v: SynAlert['variant']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.variant = v));
  }
  get variant(): SynAlert['variant'] {
    return this.nativeElement.variant;
  }

  /**
* The length of time, in milliseconds, the alert will show before closing itself.
* If the user interacts with
the alert before it closes (e.g.
* moves the mouse over it), the timer will restart.
* Defaults to `Infinity`, meaning
the alert will not close on its own.
 */
  @Input()
  set duration(v: SynAlert['duration']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.duration = v));
  }
  get duration(): SynAlert['duration'] {
    return this.nativeElement.duration;
  }

  /**
   * Emitted when the alert opens.
   */
  @Output() synShowEvent = new EventEmitter<SynShowEvent>();

  /**
   * Emitted after the alert opens and all animations are complete.
   */
  @Output() synAfterShowEvent = new EventEmitter<SynAfterShowEvent>();

  /**
   * Emitted when the alert closes.
   */
  @Output() synHideEvent = new EventEmitter<SynHideEvent>();

  /**
   * Emitted after the alert closes and all animations are complete.
   */
  @Output() synAfterHideEvent = new EventEmitter<SynAfterHideEvent>();
}

export type { SynShowEvent } from '@synergy-design-system/components';
export type { SynAfterShowEvent } from '@synergy-design-system/components';
export type { SynHideEvent } from '@synergy-design-system/components';
export type { SynAfterHideEvent } from '@synergy-design-system/components';
