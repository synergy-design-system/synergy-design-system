// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED @synergy-design-system/angular wrappers for @synergy-design-system/components
// Please do not edit this file directly!
// It will get recreated when running pnpm build.
// ---------------------------------------------------------------------
import {
  Component,
  ElementRef,
  NgZone,
  Input,
  Output,
  EventEmitter,
  AfterContentInit,
} from '@angular/core';
import type { SynTag } from '@synergy-design-system/components';
import type { SynRemoveEvent } from '@synergy-design-system/components';
import '@synergy-design-system/components/components/tag/tag.js';

/**
 * @summary Tags are used as labels to organize things or to indicate a selection.
 * @documentation https://synergy-design-system.github.io/?path=/docs/components-syn-tag--docs
 * @status stable
 * @since 2.0
 *
 * @dependency syn-icon-button
 *
 * @slot - The tag's content.
 *
 * @event syn-remove - Emitted when the remove button is activated.
 *
 * @csspart base - The component's base wrapper.
 * @csspart content - The tag's content.
 * @csspart remove-button - The tag's remove button, an `<syn-icon-button>`.
 * @csspart remove-button__base - The remove button's exported `base` part.
 */
@Component({
  selector: 'syn-tag',
  standalone: true,
  template: '<ng-content></ng-content>',
})
export class SynTagComponent {
  public nativeElement: SynTag;
  private _ngZone: NgZone;

  constructor(e: ElementRef, ngZone: NgZone) {
    this.nativeElement = e.nativeElement;
    this._ngZone = ngZone;
    this.nativeElement.addEventListener('syn-remove', (e: SynRemoveEvent) => {
      this.synRemoveEvent.emit(e);
    });
  }

  /**
   * The tag's size.
   */
  @Input()
  set size(v: SynTag['size']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.size = v));
  }
  get size(): SynTag['size'] {
    return this.nativeElement.size;
  }

  /**
   * Makes the tag removable and shows a remove button.
   */
  @Input()
  set removable(v: '' | SynTag['removable']) {
    this._ngZone.runOutsideAngular(
      () => (this.nativeElement.removable = v === '' || v),
    );
  }
  get removable(): SynTag['removable'] {
    return this.nativeElement.removable;
  }

  /**
   * Emitted when the remove button is activated.
   */
  @Output() synRemoveEvent = new EventEmitter<SynRemoveEvent>();
}

export type { SynRemoveEvent } from '@synergy-design-system/components';
