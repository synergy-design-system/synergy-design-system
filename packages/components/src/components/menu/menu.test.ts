/**
 * ---------------------------------------------------------------------
 * ðŸ”’ AUTOGENERATED BY VENDORISM
 * Removing this comment will prevent it from being managed by it.
 * ---------------------------------------------------------------------
 */

/* eslint-disable */
import '../../../dist/synergy.js';
import { clickOnElement } from '../../internal/test.js';
import { expect, fixture } from '@open-wc/testing';
import { html } from 'lit';
import { sendKeys } from '@web/test-runner-commands';
import sinon from 'sinon';
import type { SynSelectEvent } from '../../events/syn-select.js';
import type SynMenu from './menu.js';
import type SynMenuItem from '../menu-item/menu-item.component.js';

describe('<syn-menu>', () => {
  it('emits syn-select with the correct event detail when clicking an item', async () => {
    const menu = await fixture<SynMenu>(html`
      <syn-menu>
        <syn-menu-item value="item-1">Item 1</syn-menu-item>
        <syn-menu-item value="item-2">Item 2</syn-menu-item>
        <syn-menu-item value="item-3">Item 3</syn-menu-item>
        <syn-menu-item value="item-4">Item 4</syn-menu-item>
      </syn-menu>
    `);
    const item2 = menu.querySelectorAll('syn-menu-item')[1];
    const selectHandler = sinon.spy((event: SynSelectEvent) => {
      const item = event.detail.item;
      if (item !== item2) {
        expect.fail('Incorrect event detail emitted with syn-select');
      }
    });

    menu.addEventListener('syn-select', selectHandler);
    await clickOnElement(item2);

    expect(selectHandler).to.have.been.calledOnce;
  });

  it('can be selected via keyboard', async () => {
    const menu = await fixture<SynMenu>(html`
      <syn-menu>
        <syn-menu-item value="item-1">Item 1</syn-menu-item>
        <syn-menu-item value="item-2">Item 2</syn-menu-item>
        <syn-menu-item value="item-3">Item 3</syn-menu-item>
        <syn-menu-item value="item-4">Item 4</syn-menu-item>
      </syn-menu>
    `);
    const [item1, item2] = menu.querySelectorAll('syn-menu-item');
    const selectHandler = sinon.spy((event: SynSelectEvent) => {
      const item = event.detail.item;
      if (item !== item2) {
        expect.fail('Incorrect item selected');
      }
    });

    menu.addEventListener('syn-select', selectHandler);

    item1.focus();
    await item1.updateComplete;
    await sendKeys({ press: 'ArrowDown' });
    await sendKeys({ press: 'Enter' });

    expect(selectHandler).to.have.been.calledOnce;
  });

  it('does not select disabled items when clicking', async () => {
    const menu = await fixture<SynMenu>(html`
      <syn-menu>
        <syn-menu-item value="item-1">Item 1</syn-menu-item>
        <syn-menu-item value="item-2" disabled>Item 2</syn-menu-item>
        <syn-menu-item value="item-3">Item 3</syn-menu-item>
        <syn-menu-item value="item-4">Item 4</syn-menu-item>
      </syn-menu>
    `);
    const item2 = menu.querySelectorAll('syn-menu-item')[1];
    const selectHandler = sinon.spy();

    menu.addEventListener('syn-select', selectHandler);

    await clickOnElement(item2);

    expect(selectHandler).to.not.have.been.calledOnce;
  });

  it('does not select disabled items when pressing enter', async () => {
    const menu = await fixture<SynMenu>(html`
      <syn-menu>
        <syn-menu-item value="item-1">Item 1</syn-menu-item>
        <syn-menu-item value="item-2" disabled>Item 2</syn-menu-item>
        <syn-menu-item value="item-3">Item 3</syn-menu-item>
        <syn-menu-item value="item-4">Item 4</syn-menu-item>
      </syn-menu>
    `);
    const [item1, item2] = menu.querySelectorAll('syn-menu-item');
    const selectHandler = sinon.spy();

    menu.addEventListener('syn-select', selectHandler);

    item1.focus();
    await item1.updateComplete;
    await sendKeys({ press: 'ArrowDown' });
    expect(document.activeElement).to.equal(item2);
    await sendKeys({ press: 'Enter' });
    await item2.updateComplete;

    expect(selectHandler).to.not.have.been.called;
  });

  // @see https://github.com/shoelace-style/shoelace/issues/1596
  it('Should fire "syn-select" when clicking an element within a menu-item', async () => {
    // eslint-disable-next-line
    const selectHandler = sinon.spy(() => {});

    const menu: SynMenu = await fixture(html`
      <syn-menu>
        <syn-menu-item>
          <span>Menu item</span>
        </syn-menu-item>
      </syn-menu>
    `);

    menu.addEventListener('syn-select', selectHandler);
    const span = menu.querySelector('span')!;
    await clickOnElement(span);

    expect(selectHandler).to.have.been.calledOnce;
  });

  // @see https://github.com/shoelace-style/shoelace/issues/2115
  it('Should be able to check a checkbox menu item in a submenu', async () => {
    const menu: SynMenu = await fixture(html`
      <syn-menu style="max-width: 200px;">
        <syn-menu-item>
          <span>Menu item</span>
          <syn-menu slot="submenu">
            <syn-menu-item type="checkbox" checked>Checkbox</syn-menu-item>
          </syn-menu>
        </syn-menu-item>
      </syn-menu>
    `);

    const menuItem = menu.querySelector<SynMenuItem>('syn-menu-item')!;
    const checkbox = menu.querySelector<SynMenuItem>("[type='checkbox']")!;

    expect(checkbox.checked).to.equal(true);
    await clickOnElement(menuItem); // Focus the menu item
    await sendKeys({ press: 'ArrowRight' }); // Open the submenu
    await clickOnElement(checkbox); // Click the checkbox
    await checkbox.updateComplete;
    expect(checkbox.checked).to.equal(false);
  });
});
