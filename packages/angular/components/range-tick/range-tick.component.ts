// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED @synergy-design-system/angular wrappers for @synergy-design-system/components
// Please do not edit this file directly!
// It will get recreated when running pnpm build.
// ---------------------------------------------------------------------
import {
  Component,
  ElementRef,
  NgZone,
  Input,
  Output,
  EventEmitter,
  AfterContentInit,
} from '@angular/core';
import type { SynRangeTick } from '@synergy-design-system/components';

import '@synergy-design-system/components/components/range-tick/range-tick.js';

/**
 * @summary Ticks visually improve positioning on range sliders.
 * @documentation https://synergy-design-system.github.io/?path=/docs/components-syn-range-tick--docs
 * @status stable
 *
 * @slot - The tick's label
 *
 * @csspart base - The component's base wrapper.
 * @csspart label - The component's label.
 * @csspart line - The component's tick line.
 *
 * @cssproperty --tick-height - The height of the tick marker.
 * @cssproperty --tick-label-top - The top offset of the tick label.
 */
@Component({
  selector: 'syn-range-tick',
  standalone: true,
  template: '<ng-content></ng-content>',
})
export class SynRangeTickComponent {
  public nativeElement: SynRangeTick;
  private _ngZone: NgZone;

  constructor(e: ElementRef, ngZone: NgZone) {
    this.nativeElement = e.nativeElement;
    this._ngZone = ngZone;
  }

  /**
   * Whether the tick should be shown as a subdivision.
   */
  @Input()
  set subdivision(v: '' | SynRangeTick['subdivision']) {
    this._ngZone.runOutsideAngular(
      () => (this.nativeElement.subdivision = v === '' || v),
    );
  }
  get subdivision(): SynRangeTick['subdivision'] {
    return this.nativeElement.subdivision;
  }
}
