/**
 * @typedef {import('@figma-export/types').ComponentOutputter} ComponentOutputter
 */
import {
  mkdir,
  writeFile,
} from 'node:fs/promises';

/**
 * Create a code connect template for a Figma icon
 * @param {string} id The id of the icon in Figma
 * @param {string} name The components name
 * @returns {string} The code connect template
 */
const createCodeConnector = (id, name) => `
// Synergy Web Component Connection for icon ${name}
figma.connect('https://www.figma.com/design/${id}', {
  example: ({
    name,
  }) => html\`
    <syn-icon name=\${name}></syn-icon>
  \`,
  imports: [
    'import { SynIcon } from "@synergy-design-system/components";',
  ],
  links: [
    {
      name: 'Documentation',
      url: 'https://synergy-design-system.github.io/?path=/docs/components-syn-icon--docs',
    },
  ],
  props: {
    name: '${name}',
  },
});
`.trimStart();

/**
 * Write the content to the file system.
 * @param {string} filePath The file path to write to
 * @param {string} content The content to write to the file
 * @returns {Promise<boolean>}
 */
const writeToFileSystem = async (filePath, content) => {
  try {
    await mkdir(filePath.substring(0, filePath.lastIndexOf('/')), { recursive: true });
    await writeFile(filePath, content);
    return true;
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error(`Error writing file ${filePath}:`, error);
    return false;
  }
};

/**
 * Outputs components to a json file list
 * @returns {ComponentOutputter}
 */
export const outputComponentsToCodeConnect = ({
  fileId = '',
  getBasename = ({ basename = '' }) => basename,
  output = './svg-bundle.ts',
}) => async (pages) => {
  const outputFiles = pages.map(page => {
    const pageName = page.name;
    const connectedCode = page.components
      // Remove components without SVG content
      .filter(c => c?.svg.length > 0)
      // Map to an array of [name, id] pairs
      .map(c => [
        getBasename({
          componentName: c.name,
          pageName,
          ...c.figmaExport,
        }),
        `${fileId}?node-id=${c.id}`,
      ])
      // Sort by name of the tuple
      .sort((a, b) => a.at(0).localeCompare(b.at(0)))
      // Create the code connector for each icon
      .map(([name, id]) => createCodeConnector(id, name))
      .join('\n');

    const contents = `
/* eslint-disable @typescript-eslint/quotes */
/* eslint-disable quote-props */
/* eslint-disable @typescript-eslint/comma-dangle */
/* eslint-disable sort-keys */

/**
 * This file is auto-generated by figma-export.
 * Do not edit it manually.
 * If there are new icons, please run \`pnpm fetch-assets\` in the assets package.
 */
import figma, { html } from '@figma/code-connect/html';

${connectedCode}`.trimStart();

    return {
      contents,
      filePath: output,
    };
  });

  const creation = outputFiles.map(({
    contents,
    filePath,
  }) => writeToFileSystem(filePath, contents));

  try {
    await Promise.allSettled(creation);
    return true;
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error('Error writing files:', error);
    return false;
  }
};
