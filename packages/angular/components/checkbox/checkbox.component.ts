// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED @synergy-design-system/angular wrappers for @synergy-design-system/components
// Please do not edit this file directly!
// It will get recreated when running pnpm build.
// ---------------------------------------------------------------------
import {
  Component,
  ElementRef,
  NgZone,
  Input,
  Output,
  EventEmitter,
  AfterContentInit,
} from '@angular/core';
import type { SynCheckbox } from '@synergy-design-system/components';
import type { SynBlurEvent } from '@synergy-design-system/components';
import type { SynChangeEvent } from '@synergy-design-system/components';
import type { SynFocusEvent } from '@synergy-design-system/components';
import type { SynInputEvent } from '@synergy-design-system/components';
import type { SynInvalidEvent } from '@synergy-design-system/components';
import '@synergy-design-system/components/components/checkbox/checkbox.js';

/**
 * @summary Checkboxes allow the user to toggle an option on or off.
 * @documentation https://synergy-design-system.github.io/?path=/docs/components-syn-checkbox--docs
 * @status stable
 * @since 2.0
 *
 * @dependency syn-icon
 *
 * @slot - The checkbox's label.
 * @slot help-text - Text that describes how to use the checkbox. Alternatively, you can use the `help-text` attribute.
 *
 * @event syn-blur - Emitted when the checkbox loses focus.
 * @event syn-change - Emitted when the checked state changes.
 * @event syn-focus - Emitted when the checkbox gains focus.
 * @event syn-input - Emitted when the checkbox receives input.
 * @event syn-invalid - Emitted when the form control has been checked for validity and its constraints aren't satisfied.
 *
 * @csspart base - The component's base wrapper.
 * @csspart control - The square container that wraps the checkbox's checked state.
 * @csspart control--checked - Matches the control part when the checkbox is checked.
 * @csspart control--indeterminate - Matches the control part when the checkbox is indeterminate.
 * @csspart checked-icon - The checked icon, an `<syn-icon>` element.
 * @csspart indeterminate-icon - The indeterminate icon, an `<syn-icon>` element.
 * @csspart label - The container that wraps the checkbox's label.
 * @csspart form-control-help-text - The help text's wrapper.
 */
@Component({
  selector: 'syn-checkbox',
  standalone: true,
  template: '<ng-content></ng-content>',
})
export class SynCheckboxComponent {
  public nativeElement: SynCheckbox;
  private _ngZone: NgZone;

  constructor(e: ElementRef, ngZone: NgZone) {
    this.nativeElement = e.nativeElement;
    this._ngZone = ngZone;
    this.nativeElement.addEventListener('syn-blur', (e: SynBlurEvent) => {
      this.synBlurEvent.emit(e);
    });
    this.nativeElement.addEventListener('syn-change', (e: SynChangeEvent) => {
      this.synChangeEvent.emit(e);
    });
    this.nativeElement.addEventListener('syn-focus', (e: SynFocusEvent) => {
      this.synFocusEvent.emit(e);
    });
    this.nativeElement.addEventListener('syn-input', (e: SynInputEvent) => {
      this.synInputEvent.emit(e);
      this.checkedChange.emit(this.checked);
    });
    this.nativeElement.addEventListener('syn-invalid', (e: SynInvalidEvent) => {
      this.synInvalidEvent.emit(e);
    });
  }

  @Input()
  set title(v: SynCheckbox['title']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.title = v));
  }
  get title(): SynCheckbox['title'] {
    return this.nativeElement.title;
  }

  /**
   * The name of the checkbox, submitted as a name/value pair with form data.
   */
  @Input()
  set name(v: SynCheckbox['name']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.name = v));
  }
  get name(): SynCheckbox['name'] {
    return this.nativeElement.name;
  }

  /**
   * The current value of the checkbox, submitted as a name/value pair with form data.
   */
  @Input()
  set value(v: SynCheckbox['value']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.value = v));
  }
  get value(): SynCheckbox['value'] {
    return this.nativeElement.value;
  }

  /**
   * The checkbox's size.
   */
  @Input()
  set size(v: SynCheckbox['size']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.size = v));
  }
  get size(): SynCheckbox['size'] {
    return this.nativeElement.size;
  }

  /**
   * Disables the checkbox.
   */
  @Input()
  set disabled(v: '' | SynCheckbox['disabled']) {
    this._ngZone.runOutsideAngular(
      () => (this.nativeElement.disabled = v === '' || v),
    );
  }
  get disabled(): SynCheckbox['disabled'] {
    return this.nativeElement.disabled;
  }

  /**
   * Draws the checkbox in a checked state.
   */
  @Input()
  set checked(v: '' | SynCheckbox['checked']) {
    this._ngZone.runOutsideAngular(
      () => (this.nativeElement.checked = v === '' || v),
    );
  }
  get checked(): SynCheckbox['checked'] {
    return this.nativeElement.checked;
  }

  /**
* Draws the checkbox in an indeterminate state.
* This is usually applied to checkboxes that represents a "select
all/none" behavior when associated checkboxes have a mix of checked and unchecked states.
 */
  @Input()
  set indeterminate(v: '' | SynCheckbox['indeterminate']) {
    this._ngZone.runOutsideAngular(
      () => (this.nativeElement.indeterminate = v === '' || v),
    );
  }
  get indeterminate(): SynCheckbox['indeterminate'] {
    return this.nativeElement.indeterminate;
  }

  /**
* By default, form controls are associated with the nearest containing `<form>` element.
* This attribute allows you
to place the form control outside of a form and associate it with the form that has this `id`.
* The form must be in
the same document or shadow root for this to work.
 */
  @Input()
  set form(v: SynCheckbox['form']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.form = v));
  }
  get form(): SynCheckbox['form'] {
    return this.nativeElement.form;
  }

  /**
   * Makes the checkbox a required field.
   */
  @Input()
  set required(v: '' | SynCheckbox['required']) {
    this._ngZone.runOutsideAngular(
      () => (this.nativeElement.required = v === '' || v),
    );
  }
  get required(): SynCheckbox['required'] {
    return this.nativeElement.required;
  }

  /**
   * The checkbox's help text.
   * If you need to display HTML, use the `help-text` slot instead.
   */
  @Input()
  set helpText(v: SynCheckbox['helpText']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.helpText = v));
  }
  get helpText(): SynCheckbox['helpText'] {
    return this.nativeElement.helpText;
  }

  /**
   * Emitted when the checkbox loses focus.
   */
  @Output() synBlurEvent = new EventEmitter<SynBlurEvent>();

  /**
   * Emitted when the checked state changes.
   */
  @Output() synChangeEvent = new EventEmitter<SynChangeEvent>();

  /**
   * Emitted when the checkbox gains focus.
   */
  @Output() synFocusEvent = new EventEmitter<SynFocusEvent>();

  /**
   * Emitted when the checkbox receives input.
   */
  @Output() synInputEvent = new EventEmitter<SynInputEvent>();

  /**
   * Emitted when the form control has been checked for validity and its constraints aren't satisfied.
   */
  @Output() synInvalidEvent = new EventEmitter<SynInvalidEvent>();

  /**
   * Support for two way data binding
   */
  @Output() checkedChange = new EventEmitter<SynCheckbox['checked']>();
}

export type { SynBlurEvent } from '@synergy-design-system/components';
export type { SynChangeEvent } from '@synergy-design-system/components';
export type { SynFocusEvent } from '@synergy-design-system/components';
export type { SynInputEvent } from '@synergy-design-system/components';
export type { SynInvalidEvent } from '@synergy-design-system/components';
