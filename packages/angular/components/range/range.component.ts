// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED @synergy-design-system/angular wrappers for @synergy-design-system/components
// Please do not edit this file directly!
// It will get recreated when running pnpm build.
// ---------------------------------------------------------------------
import {
  Component,
  ElementRef,
  NgZone,
  Input,
  Output,
  EventEmitter,
  AfterContentInit,
} from '@angular/core';
import type { SynRange } from '@synergy-design-system/components';
import type { SynBlurEvent } from '@synergy-design-system/components';
import type { SynChangeEvent } from '@synergy-design-system/components';
import type { SynFocusEvent } from '@synergy-design-system/components';
import type { SynInputEvent } from '@synergy-design-system/components';
import type { SynInvalidEvent } from '@synergy-design-system/components';
import type { SynMoveEvent } from '@synergy-design-system/components';
import '@synergy-design-system/components/components/range/range.js';

/**
 * @summary Ranges allow the user to select values within a given range using one or two thumbs.
 * @documentation https://synergy-design-system.github.io/?path=/docs/components-syn-range--docs
 * @status stable
 *
 * @dependency syn-tooltip
 *
 * @slot label - The range's label. Alternatively, you can use the `label` attribute.
 * @slot prefix - Used to prepend a presentational icon or similar element to the range.
 * @slot suffix - Used to append a presentational icon or similar element to the range.
 * @slot help-text - Text that describes how to use the range.
 * Alternatively, you can use the `help-text` attribute.
 * @slot ticks - Used to display tick marks at specific intervals along the range.
 *
 * @event syn-blur - Emitted when the control loses focus.
 * @event syn-change - Emitted when an alteration to the control's value is committed by the user.
 * @event syn-focus - Emitted when the control gains focus.
 * @event syn-input - Emitted when the control receives input.
 * @event syn-invalid - Emitted when the form control has been checked for validity
 * and its constraints aren't satisfied.
 * @event syn-move - Emitted when the user moves a thumb, either via touch or keyboard.
 * Use `Event.preventDefault()` to prevent movement.
 *
 * @csspart form-control - The form control that wraps the label, input, and help text.
 * @csspart form-control-label - The label's wrapper.
 * @csspart form-control-help-text - The help text's wrapper.
 * @csspart base - The component's base wrapper.
 * @csspart input-wrapper - The container that wraps the input track and ticks.
 * @csspart track-wrapper - The wrapper for the track.
 * @csspart track - The inactive track.
 * @csspart active-track - The active track.
 * @csspart prefix - The container that wraps the prefix.
 * @csspart suffix - The container that wraps the suffix.
 * @csspart ticks - The container that wraps the tick marks.
 * @csspart thumb - The thumb(s) that the user can drag to change the range.
 *
 * @csspart tooltip__base - The base of the tooltip
 * @csspart tooltip__arrow - The arrow of the tooltip
 * @csspart tooltip__popup - The popup of the tooltip
 * @csspart tooltip__body - The body of the tooltip
 *
 * @cssproperty --thumb-size - The size of a thumb.
 * @cssproperty --thumb-hit-area-size - The clickable area around the thumb.
 * Per default this is set to 140% of the thumb size. Must be a scale css value (defaults to 1.4).
 * @cssproperty --track-hit-area-size - The clickable area around the track (top and left).
 * @cssproperty --track-color-active - Color of the track representing the current value.
 * @cssproperty --track-color-inactive - Color of the track that represents the remaining value.
 * @cssproperty --track-height - The height of the track.
 * @cssproperty --track-active-offset - The point of origin of the active track,
 * starting at the left side of the range.
 */
@Component({
  selector: 'syn-range',
  standalone: true,
  template: '<ng-content></ng-content>',
})
export class SynRangeComponent {
  public nativeElement: SynRange;
  private _ngZone: NgZone;

  constructor(e: ElementRef, ngZone: NgZone) {
    this.nativeElement = e.nativeElement;
    this._ngZone = ngZone;
    this.nativeElement.addEventListener('syn-blur', (e: SynBlurEvent) => {
      this.synBlurEvent.emit(e);
    });
    this.nativeElement.addEventListener('syn-change', (e: SynChangeEvent) => {
      this.synChangeEvent.emit(e);
      this.valueChange.emit(this.value);
    });
    this.nativeElement.addEventListener('syn-focus', (e: SynFocusEvent) => {
      this.synFocusEvent.emit(e);
    });
    this.nativeElement.addEventListener('syn-input', (e: SynInputEvent) => {
      this.synInputEvent.emit(e);
    });
    this.nativeElement.addEventListener('syn-invalid', (e: SynInvalidEvent) => {
      this.synInvalidEvent.emit(e);
    });
    this.nativeElement.addEventListener('syn-move', (e: SynMoveEvent) => {
      this.synMoveEvent.emit(e);
    });
  }

  /**
   * The name of the range, submitted as a name/value pair with form data.
   */
  @Input()
  set name(v: SynRange['name']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.name = v));
  }
  get name(): SynRange['name'] {
    return this.nativeElement.name;
  }

  /**
   * The range's label.
   * If you need to display HTML, use the `label` slot instead.
   */
  @Input()
  set label(v: SynRange['label']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.label = v));
  }
  get label(): SynRange['label'] {
    return this.nativeElement.label;
  }

  /**
   * The range's help text.
   * If you need to display HTML, use the help-text slot instead.
   */
  @Input()
  set helpText(v: SynRange['helpText']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.helpText = v));
  }
  get helpText(): SynRange['helpText'] {
    return this.nativeElement.helpText;
  }

  /**
   * Disables the range.
   */
  @Input()
  set disabled(v: '' | SynRange['disabled']) {
    this._ngZone.runOutsideAngular(
      () => (this.nativeElement.disabled = v === '' || v),
    );
  }
  get disabled(): SynRange['disabled'] {
    return this.nativeElement.disabled;
  }

  /**
   * The minimum acceptable value of the range.
   */
  @Input()
  set min(v: SynRange['min']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.min = v));
  }
  get min(): SynRange['min'] {
    return this.nativeElement.min;
  }

  /**
   * The maximum acceptable value of the range.
   */
  @Input()
  set max(v: SynRange['max']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.max = v));
  }
  get max(): SynRange['max'] {
    return this.nativeElement.max;
  }

  /**
   * The interval at which the range will increase and decrease.
   */
  @Input()
  set step(v: SynRange['step']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.step = v));
  }
  get step(): SynRange['step'] {
    return this.nativeElement.step;
  }

  /**
   * The range's size.
   */
  @Input()
  set size(v: SynRange['size']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.size = v));
  }
  get size(): SynRange['size'] {
    return this.nativeElement.size;
  }

  /**
   * The preferred placement of the range's tooltip.
   * Use "none" to disable the tooltip
   */
  @Input()
  set tooltipPlacement(v: SynRange['tooltipPlacement']) {
    this._ngZone.runOutsideAngular(
      () => (this.nativeElement.tooltipPlacement = v),
    );
  }
  get tooltipPlacement(): SynRange['tooltipPlacement'] {
    return this.nativeElement.tooltipPlacement;
  }

  /**
   * The current values of the input (in ascending order) as a string of space separated values
   */
  @Input()
  set value(v: SynRange['value']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.value = v));
  }
  get value(): SynRange['value'] {
    return this.nativeElement.value;
  }

  /**
* Set to true to restrict the movement of a thumb to its next and previous thumb.
This only affects multi range components
 */
  @Input()
  set restrictMovement(v: '' | SynRange['restrictMovement']) {
    this._ngZone.runOutsideAngular(
      () => (this.nativeElement.restrictMovement = v === '' || v),
    );
  }
  get restrictMovement(): SynRange['restrictMovement'] {
    return this.nativeElement.restrictMovement;
  }

  /**
* By default, form controls are associated with the nearest containing `<form>` element.
This attribute allows you to place the form control outside of a form
and associate it with the form that has this `id`.
The form must be in the same document or shadow root for this to work.
 */
  @Input()
  set form(v: SynRange['form']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.form = v));
  }
  get form(): SynRange['form'] {
    return this.nativeElement.form;
  }

  /**
* A function used to format the tooltip's value.
The value of the thumb is passed as the only argument.
The function should return a string to display in the tooltip.
 */
  @Input()
  set tooltipFormatter(v: SynRange['tooltipFormatter']) {
    this._ngZone.runOutsideAngular(
      () => (this.nativeElement.tooltipFormatter = v),
    );
  }
  get tooltipFormatter(): SynRange['tooltipFormatter'] {
    return this.nativeElement.tooltipFormatter;
  }

  /**
   * Emitted when the control loses focus.
   */
  @Output() synBlurEvent = new EventEmitter<SynBlurEvent>();

  /**
   * Emitted when an alteration to the control's value is committed by the user.
   */
  @Output() synChangeEvent = new EventEmitter<SynChangeEvent>();

  /**
   * Emitted when the control gains focus.
   */
  @Output() synFocusEvent = new EventEmitter<SynFocusEvent>();

  /**
   * Emitted when the control receives input.
   */
  @Output() synInputEvent = new EventEmitter<SynInputEvent>();

  /**
   * Emitted when the form control has been checked for validity and its constraints aren't satisfied.
   */
  @Output() synInvalidEvent = new EventEmitter<SynInvalidEvent>();

  /**
   * Emitted when the user moves a thumb, either via touch or keyboard.
   * Use `Event.preventDefault()` to prevent movement.
   */
  @Output() synMoveEvent = new EventEmitter<SynMoveEvent>();

  /**
   * Support for two way data binding
   */
  @Output() valueChange = new EventEmitter<SynRange['value']>();
}

export type { SynBlurEvent } from '@synergy-design-system/components';
export type { SynChangeEvent } from '@synergy-design-system/components';
export type { SynFocusEvent } from '@synergy-design-system/components';
export type { SynInputEvent } from '@synergy-design-system/components';
export type { SynInvalidEvent } from '@synergy-design-system/components';
export type { SynMoveEvent } from '@synergy-design-system/components';
