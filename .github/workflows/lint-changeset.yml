name: Lint Changeset

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  pull-requests: write
  contents: read

jobs:
  validate-changeset:
    name: Validate Changeset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Needed to receive the branch name!
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      # We need this to get the main branch, too
      # Without fetching like this, the main branch is not available for status checks
      - name: Fetch main branch
        run: git fetch origin main:main

      # Setup Node.js and pnpm
      - name: Setup Environment
        uses: ./.github/actions/setup-node-pnpm
        with:
          with-build: 'false'

      # Calls the validation script and captures output
      - name: Validate Changeset
        id: validate
        run: |
          # Run the validation script and capture output + status
          OUTPUT=$(node packages/_private/release-utils/src/lint.js 2>&1) || STATUS=$?
          
          # Determine status for badge
          if [ -z "$STATUS" ]; then
            BADGE="✅ Valid"
          else
            BADGE="❌ Invalid"
          fi
          
          # Set outputs
          echo "status=${STATUS:-0}" >> $GITHUB_OUTPUT
          echo "badge=$BADGE" >> $GITHUB_OUTPUT
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Capture the changeset status but do not fail the job
      # Output will be appended to the PR comment
      - name: Check changeset status (capture output, do not fail)
        id: changeset_status
        continue-on-error: true
        run: |
          # Run command and save to file
          pnpm release.status --no-color > changeset-status.txt 2>&1 || true
          
          # Escape backticks before adding to GITHUB_OUTPUT
          sed -i 's/`/\\`/g' changeset-status.txt
          
          # Set the output
          echo "output<<EOF" >> $GITHUB_OUTPUT
          cat changeset-status.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Post or update a comment on the PR with the results from the validation
      - name: Update PR
        uses: actions/github-script@v7
        with:
          script: |
            // Parse outputs from previous step
            const badge = '${{ steps.validate.outputs.badge }}';
            const result = `${{ steps.validate.outputs.result }}`;
            const statusOutput = `${{ steps.changeset_status.outputs.output }}`;
            const statusCode = parseInt('${{ steps.validate.outputs.status }}');
            
            // Format the comment body
            const body = `## ${badge} Changeset Validation
            
            \`\`\`
            ${result}
            \`\`\`
            
            ### Changeset Status
            \`\`\`
            ${statusOutput}
            \`\`\`

            ${statusCode !== 0 ? `
            ### How to fix this?
            
            Run the following command locally to capture any errors:
            
            \`\`\`bash
            # Checks for errors in your changeset
            pnpm release.validate

            # In case there was no changeset found you can create a default one using:
            pnpm release.create
            \`\`\`
            ` : ''}
            
            <details>
              <summary>About this check</summary>
              
              This validation ensures your changeset follows project conventions.
              Last checked: ${new Date().toISOString()}
            </details>`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && 
                     comment.body.includes('Changeset Validation');
            });
            
            // Update or create comment
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
              });
            }

      # Fail the job if changeset validation failed
      - name: Check changeset status
        run: pnpm release.status
