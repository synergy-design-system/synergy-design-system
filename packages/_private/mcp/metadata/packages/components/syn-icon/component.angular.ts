// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED @synergy-design-system/angular wrappers for @synergy-design-system/components
// Please do not edit this file directly!
// It will get recreated when running pnpm build.
// ---------------------------------------------------------------------
import {
  Component,
  ElementRef,
  NgZone,
  Input,
  Output,
  EventEmitter,
  AfterContentInit,
} from '@angular/core';
import type { SynIcon } from '@synergy-design-system/components';
import type { SynLoadEvent } from '@synergy-design-system/components';
import type { SynErrorEvent } from '@synergy-design-system/components';
import '@synergy-design-system/components/components/icon/icon.js';

/**
 * @summary Icons are symbols that can be used to represent various options within an application.
 * @documentation https://synergy-design-system.github.io/?path=/docs/components-syn-icon--docs
 * @status stable
 * @since 2.0
 *
 * @event syn-load - Emitted when the icon has loaded. When using `spriteSheet: true` this will not emit.
 * @event syn-error - Emitted when the icon fails to load due to an error. When using `spriteSheet: true` this will not emit.
 *
 * @csspart svg - The internal SVG element.
 * @csspart use - The <use> element generated when using `spriteSheet: true`
 */
@Component({
  selector: 'syn-icon',
  standalone: true,
  template: '<ng-content></ng-content>',
})
export class SynIconComponent {
  public nativeElement: SynIcon;
  private _ngZone: NgZone;

  constructor(e: ElementRef, ngZone: NgZone) {
    this.nativeElement = e.nativeElement;
    this._ngZone = ngZone;
    this.nativeElement.addEventListener('syn-load', (e: SynLoadEvent) => {
      this.synLoadEvent.emit(e);
    });
    this.nativeElement.addEventListener('syn-error', (e: SynErrorEvent) => {
      this.synErrorEvent.emit(e);
    });
  }

  /**
   * The name of the icon to draw.
   * Available names depend on the icon library being used.
   */
  @Input()
  set name(v: SynIcon['name']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.name = v));
  }
  get name(): SynIcon['name'] {
    return this.nativeElement.name;
  }

  /**
* An external URL of an SVG file.
* Be sure you trust the content you are including, as it will be executed as code and
can result in XSS attacks.
 */
  @Input()
  set src(v: SynIcon['src']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.src = v));
  }
  get src(): SynIcon['src'] {
    return this.nativeElement.src;
  }

  /**
* An alternate description to use for assistive devices.
* If omitted, the icon will be considered presentational and
ignored by assistive devices.
 */
  @Input()
  set label(v: SynIcon['label']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.label = v));
  }
  get label(): SynIcon['label'] {
    return this.nativeElement.label;
  }

  /**
   * The name of a registered custom icon library.
   */
  @Input()
  set library(v: SynIcon['library']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.library = v));
  }
  get library(): SynIcon['library'] {
    return this.nativeElement.library;
  }

  /**
   * Emitted when the icon has loaded.
   * When using `spriteSheet: true` this will not emit.
   */
  @Output() synLoadEvent = new EventEmitter<SynLoadEvent>();

  /**
   * Emitted when the icon fails to load due to an error.
   * When using `spriteSheet: true` this will not emit.
   */
  @Output() synErrorEvent = new EventEmitter<SynErrorEvent>();
}

export type { SynLoadEvent } from '@synergy-design-system/components';
export type { SynErrorEvent } from '@synergy-design-system/components';
