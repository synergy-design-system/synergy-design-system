// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED @synergy-design-system/angular wrappers for @synergy-design-system/components
// Please do not edit this file directly!
// It will get recreated when running pnpm build.
// ---------------------------------------------------------------------
import {
  Component,
  ElementRef,
  NgZone,
  Input,
  Output,
  EventEmitter,
  AfterContentInit,
} from '@angular/core';
import type { SynProgressBar } from '@synergy-design-system/components';

import '@synergy-design-system/components/components/progress-bar/progress-bar.js';

/**
 * @summary Progress bars are used to show the status of an ongoing operation.
 * @documentation https://synergy-design-system.github.io/?path=/docs/components-syn-progress-bar--docs
 * @status stable
 * @since 2.0
 *
 * @slot - A label to show inside the progress indicator.
 *
 * @csspart base - The component's base wrapper.
 * @csspart indicator - The progress bar's indicator.
 * @csspart label - The progress bar's label.
 *
 * @cssproperty --height - The progress bar's height.
 * @cssproperty --track-color - The color of the track.
 * @cssproperty --indicator-color - The color of the indicator.
 * @cssproperty --label-color - The color of the label.
 * @cssproperty --speed - The speed of the progress bar when in indeterminate state.
 */
@Component({
  selector: 'syn-progress-bar',
  standalone: true,
  template: '<ng-content></ng-content>',
})
export class SynProgressBarComponent {
  public nativeElement: SynProgressBar;
  private _ngZone: NgZone;

  constructor(e: ElementRef, ngZone: NgZone) {
    this.nativeElement = e.nativeElement;
    this._ngZone = ngZone;
  }

  /**
   * The current progress as a percentage, 0 to 100.
   */
  @Input()
  set value(v: SynProgressBar['value']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.value = v));
  }
  get value(): SynProgressBar['value'] {
    return this.nativeElement.value;
  }

  /**
   * When true, percentage is ignored, the label is hidden, and the progress bar is drawn in an indeterminate state.
   */
  @Input()
  set indeterminate(v: '' | SynProgressBar['indeterminate']) {
    this._ngZone.runOutsideAngular(
      () => (this.nativeElement.indeterminate = v === '' || v),
    );
  }
  get indeterminate(): SynProgressBar['indeterminate'] {
    return this.nativeElement.indeterminate;
  }

  /**
   * A custom label for assistive devices.
   */
  @Input()
  set label(v: SynProgressBar['label']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.label = v));
  }
  get label(): SynProgressBar['label'] {
    return this.nativeElement.label;
  }
}
