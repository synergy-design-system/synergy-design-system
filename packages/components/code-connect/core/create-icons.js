import fs from 'fs';
import ora from 'ora';
import * as iconsets from './icons/index.js';

const spinner = ora({ hideCursor: false });

/**
 * Create a code connect template for a Figma icon
 * @param {string} id The id of the icon in Figma
 * @param {string} name The components name
 * @returns {string} The code connect template
 */
const createCodeConnector = (id, name) => `
/**
 * This file is auto-generated by figma-export.
 * Do not edit it manually.
 */
import figma, { html } from '@figma/code-connect/html';

// Synergy Web Component Connection for icon ${name}
figma.connect('https://www.figma.com/design/${id}', {
  example: ({
    name,
  }) => html\`
    <syn-icon name=\${name}></syn-icon>
  \`,
  imports: [
    'import { SynIcon } from "@synergy-design-system/components";',
  ],
  links: [
    {
      name: 'Documentation',
      url: 'https://synergy-design-system.github.io/?path=/docs/components-syn-icon--docs',
    },
  ],
  props: {
    name: '${name}',
  },
});
`.trimStart();

spinner.text = 'Creating Code Connect Icons';
spinner.start();

const results = Object
  .entries(iconsets)
  .map(([name, data]) => {
    spinner.text = `Creating Code Connect Icons for iconset: ${name}`;
    return Object
      .entries(data)
      .map(([icon, id]) => {
        spinner.text = `Creating Code Connect Icon: ${icon}`;
        const content = createCodeConnector(id, icon);
        const filePath = `../icons/${name}/${icon}.figma.ts`;

        try {
          fs.mkdirSync(`../icons/${name}`, { recursive: true });
          fs.writeFileSync(filePath, content, 'utf8');
          spinner.succeed(`Created figma connector for ${icon}`);
          return true;
        } catch (e) {
          spinner.fail(`Failed to create: ${filePath}`);
          return false;
        }
      });
  });

const wasSuccessful = results.flat().every(x => x);

if (wasSuccessful) {
  spinner.succeed('All icons created successfully');
  spinner.stop();
  process.exit(0);
} else {
  spinner.fail('Some icons failed to create');
  spinner.stop();
  process.exit(1);
}
