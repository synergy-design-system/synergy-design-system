/**
 * ---------------------------------------------------------------------
 * ðŸ”’ AUTOGENERATED BY VENDORISM
 * Removing this comment will prevent it from being managed by it.
 * ---------------------------------------------------------------------
 */

/* eslint-disable */
import { classMap } from 'lit/directives/class-map.js';
import { defaultValue } from '../../internal/default-value.js';
import { FormControlController } from '../../internal/form.js';
import { HasSlotController } from '../../internal/slot.js';
import { html } from 'lit';
import { ifDefined } from 'lit/directives/if-defined.js';
import { live } from 'lit/directives/live.js';
import { LocalizeController } from '../../utilities/localize.js';
import { property, query, state } from 'lit/decorators.js';
import { watch } from '../../internal/watch.js';
import componentStyles from '../../styles/component.styles.js';
import formControlStyles from '../../styles/form-control.styles.js';
import formControlCustomStyles from '../../styles/form-control.custom.styles.js';
import SynergyElement from '../../internal/synergy-element.js';
import SynIcon from '../icon/icon.component.js';
import SynDivider from '../divider/divider.component.js';
import { longPress } from '../../internal/longpress.js';
import styles from './input.styles.js';
import customStyles from './input.custom.styles.js';
import type { CSSResultGroup } from 'lit';
import type { SynergyFormControl } from '../../internal/synergy-element.js';
import {
  type NumericStrategy,
  createNumericStrategy,
  nativeNumericStrategy,
  modernNumericStrategy,
} from './strategies.js';
import { formatNumber } from './formatter.js';
import type { SynClampDetails } from '../../events/syn-clamp.js';
import { enableDefaultSettings } from '../../utilities/defaultSettings/decorator.js';

/**
 * @summary Inputs collect data from the user.
 * @documentation https://synergy-design-system.github.io/?path=/docs/components-syn-input--docs
 * @status stable
 * @since 2.0
 *
 * @dependency syn-icon
 * @dependency syn-divider
 *
 * @slot label - The input's label. Alternatively, you can use the `label` attribute.
 * @slot prefix - Used to prepend a presentational icon or similar element to the input.
 * @slot suffix - Used to append a presentational icon or similar element to the input.
 * @slot clear-icon - An icon to use in lieu of the default clear icon.
 * @slot show-password-icon - An icon to use in lieu of the default show password icon.
 * @slot hide-password-icon - An icon to use in lieu of the default hide password icon.
 * @slot help-text - Text that describes how to use the input. Alternatively, you can use the `help-text` attribute.
 * @slot increment-number-stepper - An icon to use in lieu of the default increment number stepper icon.
 * @slot decrement-number-stepper - An icon to use in lieu of the default decrement number stepper icon.
 *
 * @event syn-blur - Emitted when the control loses focus.
 * @event syn-change - Emitted when an alteration to the control's value is committed by the user.
 * @event syn-clear - Emitted when the clear button is activated.
 * @event syn-focus - Emitted when the control gains focus.
 * @event syn-input - Emitted when the control receives input.
 * @event syn-invalid - Emitted when the form control has been checked for validity and its constraints aren't satisfied.
 * @event syn-clamp - Emitted if the numeric strategy allows autoClamp and the value is clamped to the min or max attribute.
 *
 * @csspart form-control - The form control that wraps the label, input, and help text.
 * @csspart form-control-label - The label's wrapper.
 * @csspart form-control-input - The input's wrapper.
 * @csspart form-control-help-text - The help text's wrapper.
 * @csspart base - The component's base wrapper.
 * @csspart input - The internal `<input>` control.
 * @csspart prefix - The container that wraps the prefix.
 * @csspart clear-button - The clear button.
 * @csspart password-toggle-button - The password toggle button.
 * @csspart suffix - The container that wraps the suffix.
 * @csspart stepper - The container that wraps the number stepper.
 * @csspart decrement-number-stepper - The decrement number stepper button.
 * @csspart increment-number-stepper - The increment number stepper button.
 * @csspart divider - The divider between the increment and decrement number stepper buttons.
 *
 * @cssproperty --syn-input-autofill-shadow - The shadow to apply when the input is autofilled.
 * @cssproperty --syn-input-autofill-readonly-shadow - The shadow to apply when the input is readonly and autofilled.
 * @cssproperty --syn-input-autofill-text-fill-color - The text fill color to apply when the input is autofilled.
 * @cssproperty --syn-input-autofill-caret-color - The caret color to apply when the input is autofilled.
 */
@enableDefaultSettings('SynInput')
export default class SynInput extends SynergyElement implements SynergyFormControl {
  static styles: CSSResultGroup = [componentStyles, formControlStyles, styles, formControlCustomStyles, customStyles];
  static dependencies = {
		'syn-icon': SynIcon,
		'syn-divider': SynDivider
	};

  private readonly formControlController = new FormControlController(this, {
    assumeInteractionOn: ['syn-blur', 'syn-input']
  });
  private readonly hasSlotController = new HasSlotController(this, 'help-text', 'label', 'prefix', 'suffix');
  private readonly localize = new LocalizeController(this);

  @query('.input__control') input: HTMLInputElement;

  @state() private hasFocus = false;
  @property({ reflect: true }) title = ''; // make reactive to pass through

  private __numberInput = Object.assign(document.createElement('input'), { type: 'number' });
  private __dateInput = Object.assign(document.createElement('input'), { type: 'date' });

  /**
   * The type of input. Works the same as a native `<input>` element, but only a subset of types are supported. Defaults
   * to `text`.
   */
  @property({ reflect: true }) type:
    | 'date'
    | 'datetime-local'
    | 'email'
    | 'number'
    | 'password'
    | 'search'
    | 'tel'
    | 'text'
    | 'time'
    | 'url' = 'text';

  /** The name of the input, submitted as a name/value pair with form data. */
  @property() name = '';

  /** The current value of the input, submitted as a name/value pair with form data. */
  @property() value = '';

  /** The default value of the form control. Primarily used for resetting the form control. */
  @defaultValue() defaultValue = '';

  /** The input's size. */
  @property({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';

  /** The input's label. If you need to display HTML, use the `label` slot instead. */
  @property() label = '';

  /** The input's help text. If you need to display HTML, use the `help-text` slot instead. */
  @property({ attribute: 'help-text' }) helpText = '';

  /** Adds a clear button when the input is not empty. */
  @property({ type: Boolean }) clearable = false;

  /** Disables the input. */
  @property({ type: Boolean, reflect: true }) disabled = false;

  /** Placeholder text to show as a hint when the input is empty. */
  @property() placeholder = '';

  /** Makes the input readonly. */
  @property({ type: Boolean, reflect: true }) readonly = false;

  /** Adds a button to toggle the password's visibility. Only applies to password types. */
  @property({ attribute: 'password-toggle', type: Boolean }) passwordToggle = false;

  /** Determines whether or not the password is currently visible. Only applies to password input types. */
  @property({ attribute: 'password-visible', type: Boolean }) passwordVisible = false;

  /** Hides the increment/decrement spin buttons for number inputs. */
  @property({ attribute: 'no-spin-buttons', type: Boolean }) noSpinButtons = false;

  /**
   * By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you
   * to place the form control outside of a form and associate it with the form that has this `id`. The form must be in
   * the same document or shadow root for this to work.
   */
  @property({ reflect: true }) form = '';

  /** Makes the input a required field. */
  @property({ type: Boolean, reflect: true }) required = false;

  /** A regular expression pattern to validate input against. */
  @property() pattern: string;

  /** The minimum length of input that will be considered valid. */
  @property({ type: Number }) minlength: number;

  /** The maximum length of input that will be considered valid. */
  @property({ type: Number }) maxlength: number;

  /** The input's minimum value. Only applies to date and number input types. */
  @property() min: number | string;

  /** The input's maximum value. Only applies to date and number input types. */
  @property() max: number | string;

  /**
   * Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is
   * implied, allowing any numeric value. Only applies to date and number input types.
   */
  @property() step: number | 'any';

  /** Controls whether and how text input is automatically capitalized as it is entered by the user. */
  @property() autocapitalize: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters';

  /** Indicates whether the browser's autocorrect feature is on or off. */
  @property() autocorrect: 'off' | 'on';

  /**
   * Specifies what permission the browser has to provide assistance in filling out form field values. Refer to
   * [this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.
   */
  @property() autocomplete: string;

  /** Indicates that the input should receive focus on page load. */
  @property({ type: Boolean }) autofocus: boolean;

  /** Used to customize the label or icon of the Enter key on virtual keyboards. */
  @property() enterkeyhint: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';

  /** Enables spell checking on the input. */
  @property({
    type: Boolean,
    converter: {
      // Allow "true|false" attribute values but keep the property boolean
      fromAttribute: value => (!value || value === 'false' ? false : true),
      toAttribute: value => (value ? 'true' : 'false')
    }
  })
  spellcheck = true;

  /**
   * Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual
   * keyboard on supportive devices.
   */
  @property() inputmode: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';

  /**
   * Optional options that should be passed to the `NumberFormatter` when formatting the value.
   * This is used to format the number when the input type is `number`.
   * Note this can only be set via `property`, not as an `attribute`!
   */
  @property({
    attribute: false,
    reflect: false,
    type: Object,
  }) numberFormatterOptions: Intl.NumberFormatOptions;

  /**
   * The minimal amount of fraction digits to use for numeric values.
   * Used to format the number when the input type is `number`.
   */
  @property({
    attribute: 'min-fraction-digits',
    type: Number,
  }) minFractionDigits: number;

  /**
   * The maximal amount of fraction digits to use for numeric values.
   * Used to format the number when the input type is `number`.
   */
  @property({
    attribute: 'max-fraction-digits',
    type: Number,
  }) maxFractionDigits: number;

  #numericStrategy: NumericStrategy = nativeNumericStrategy;

  /**
   * Defines the strategy for handling numbers in the numeric input.
   * This is used to determine how the input behaves when the user interacts with it.
   *
   * Includes the following configuration options:
   *
   * - **autoClamp**: If true, the input will clamp the value to the min and max attributes.
   * - **noStepAlign**: If true, the input will not align the value to the step attribute.
   * - **noStepValidation**: If true, the input will not validate the value against the step attribute.
   * 
   * You may provide this as one of the following values:
   *
   * - 'native': Uses the native browser implementation.
   * - 'modern': Uses a more intuitive implementation:
   *   - Values are clamped to the nearest min or max value.
   *   - Stepping is inclusive to the provided min and max values.
   *   - Provided stepping is no longer used in validation.
   * - An object that matches the `NumericStrategy` type. Note this can only be set via `property`, not as an `attribute`!
   */
  @property({
    attribute: 'numeric-strategy',
    converter: {
      fromAttribute: (value) => {
        return value === 'modern'
          ? modernNumericStrategy
          : nativeNumericStrategy;
      },
    },
    type: Object,
  })
  set numericStrategy(value: 'native' | 'modern' | Partial<NumericStrategy>) {
    switch (typeof value) {
      case 'string': this.#numericStrategy = value === 'modern' ? modernNumericStrategy : nativeNumericStrategy; break;
      case 'object': this.#numericStrategy = createNumericStrategy(value); break;
      default: this.#numericStrategy = nativeNumericStrategy;
    }
  }

  /**
   * @default nativeNumericStrategy
   * @todo: This must be changed to "modern" in Synergy@3
   */
  get numericStrategy(): 'native' | 'modern' | Partial<NumericStrategy> {
    return this.#numericStrategy;
  }

  //
  // NOTE: We use an in-memory input for these getters/setters instead of the one in the template because the properties
  // can be set before the component is rendered.
  //

  /**
   * Gets or sets the current value as a `Date` object. Returns `null` if the value can't be converted. This will use the native `<input type="{{type}}">` implementation and may result in an error.
   */
  get valueAsDate() {
    this.__dateInput.type = this.type;
    this.__dateInput.value = this.value;
    return this.input?.valueAsDate || this.__dateInput.valueAsDate;
  }

  set valueAsDate(newValue: Date | null) {
    this.__dateInput.type = this.type;
    this.__dateInput.valueAsDate = newValue;
    this.value = this.__dateInput.value;
  }

  /** Gets or sets the current value as a number. Returns `NaN` if the value can't be converted. */
  get valueAsNumber() {
    this.__numberInput.value = this.value;
    return this.input?.valueAsNumber || this.__numberInput.valueAsNumber;
  }

  set valueAsNumber(newValue: number) {
    this.__numberInput.valueAsNumber = newValue;
    this.value = this.__numberInput.value;
  }

  /** Gets the validity state object */
  get validity() {
    return this.input.validity;
  }

  /** Gets the validation message */
  get validationMessage() {
    return this.input.validationMessage;
  }

  firstUpdated() {
    this.formControlController.updateValidity();
  }

  private handleBlur() {
    this.hasFocus = false;
    this.emit('syn-blur');
  }

  private handleStep(){
    this.handleInput();
    this.input.focus();
  }

  private handleStepUp() {
    this.stepUp();
    this.handleStep();
  }

  private handleStepDown() {
    this.stepDown();
    this.handleStep();
  }
  
  private isDecrementDisabled() {
    if(this.disabled || this.readonly) {
      return true;
    }

    if (this.min === undefined || this.min === null) {
      return false;
    }

    const min = typeof this.min === 'string' ? parseFloat(this.min) : this.min;

    // #872: Use value instead of valueAsNumber as valueAsNumber is drawn from the hidden input
    // that is not yet updated in the current render cycle.
    return parseFloat(this.value) <= min;
  }

  private isIncrementDisabled() {
    if(this.disabled || this.readonly) {
      return true;
    }

    if (this.max === undefined || this.max === null) {
      return false;
    }

    const max = typeof this.max === 'string' ? parseFloat(this.max) : this.max;

    // #872: Use value instead of valueAsNumber as valueAsNumber is drawn from the hidden input
    // that is not yet updated in the current render cycle.
    return parseFloat(this.value) >= max;
  }

  
  private handleNumericStrategyAutoClamp() {
    const {
      valueAsNumber,
      max: initialMax,
      min: initialMin,
    } = this;

    // Exit early if there should be no clamping
    if (!this.#numericStrategy.autoClamp) {
      return {
        eventObj: null,
        shouldClamp: false,
        nextValue: valueAsNumber,
      }
    }

    const min = typeof initialMin === 'string' ? parseFloat(initialMin) : initialMin;
    const max = typeof initialMax === 'string' ? parseFloat(initialMax) : initialMax;

    let nextValue = valueAsNumber;
    let clampEvent = '';
    if (nextValue < min) {
      nextValue = min;
      clampEvent = 'min';
    } else if (nextValue > max) {
      nextValue = max;
      clampEvent = 'max';
    }

    const eventObj = clampEvent ? {
      detail: {
        clampedTo: clampEvent as SynClampDetails['clampedTo'],
        lastUserValue: valueAsNumber,
      },
    } : null;

    return {
      eventObj,
      shouldClamp: !!eventObj,
      nextValue,
    };
  }

  private handleChange() {
    if (this.type === 'number' && (this.#isNumberFormattingEnabled() || this.#numericStrategy.autoClamp)) {
      const { eventObj, shouldClamp, nextValue } = this.handleNumericStrategyAutoClamp();
      let initialNextValue = this.#numericStrategy.autoClamp ? nextValue : this.valueAsNumber;

      // Make sure to flag non numeric values as invalid
      if (isNaN(initialNextValue)) {
        // Make sure to set the value to the min or max value if the input is empty
        // If neither min nor max are set, we set the value to 0
        const { max, min } = this;

        if (max !== undefined && max !== null) {
          initialNextValue = typeof max === 'string' ? parseFloat(max) : +max;
        } else if (min !== undefined && min !== null) {
          initialNextValue = typeof min === 'string' ? parseFloat(min) : +min;
        } else {
          initialNextValue = 0;
        }
      }

      this.value = this.#isNumberFormattingEnabled()
        ? this.#formatNumber(initialNextValue)
        : initialNextValue.toString();

      // Make sure to wait for the updateComplete to be done before updating the validity
      // and firing events. This is needed because valueAsNumber is not updated yet when the event is fired
      this.updateComplete.then(() => {

        if (shouldClamp && eventObj) {
          this.emit('syn-clamp', eventObj);
        }

        this.formControlController.updateValidity();
        this.emit('syn-change');
      });
      return;
    }
    this.value = this.input.value;
    this.emit('syn-change');
  }

  private handleClearClick(event: MouseEvent) {
    event.preventDefault();

    if (this.value !== '') {
      this.value = '';
      this.emit('syn-clear');
      this.emit('syn-input');
      this.emit('syn-change');
    }

    this.input.focus();
  }

  private handleFocus() {
    this.hasFocus = true;
    this.emit('syn-focus');
  }

  private handleInput() {
    this.value = this.input.value;
    this.formControlController.updateValidity();
    this.emit('syn-input');
  }

  private handleInvalid(event: Event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }

  private handleKeyDown(event: KeyboardEvent) {
    if (this.#numericStrategy.noStepAlign && this.type === 'number') {
      const { key } = event;
      if (key === 'ArrowUp' || key === 'ArrowDown') {
        event.preventDefault();
        event.stopPropagation();

        if (key === 'ArrowUp') {
          this.handleStepUp();
        } else if (key === 'ArrowDown') {
          this.handleStepDown();
        }
        this.handleChange();
        return;
      }
    }
    const hasModifier = event.metaKey || event.ctrlKey || event.shiftKey || event.altKey;

    // Pressing enter when focused on an input should submit the form like a native input, but we wait a tick before
    // submitting to allow users to cancel the keydown event if they need to
    if (event.key === 'Enter' && !hasModifier) {
      setTimeout(() => {
        //
        // When using an Input Method Editor (IME), pressing enter will cause the form to submit unexpectedly. One way
        // to check for this is to look at event.isComposing, which will be true when the IME is open.
        //
        // See https://github.com/shoelace-style/shoelace/pull/988
        //
        if (!event.defaultPrevented && !event.isComposing) {
          this.formControlController.submit();
        }
      });
    }
  }

  private handlePasswordToggle() {
    this.passwordVisible = !this.passwordVisible;
  }

  @watch('disabled', { waitUntilFirstUpdate: true })
  handleDisabledChange() {
    // Disabled form controls are always valid
    this.formControlController.setValidity(this.disabled);
  }

  @watch('step', { waitUntilFirstUpdate: true })
  handleStepChange() {
    // If the numericStrategy has noStepValidation set, skip this as the inputs step will always set to "any".
    if (this.#numericStrategy.noStepValidation) {
      return;
    }
    // If step changes, the value may become invalid so we need to recheck after the update. We set the new step
    // imperatively so we don't have to wait for the next render to report the updated validity.
    this.input.step = String(this.step);
    this.formControlController.updateValidity();
  }

  @watch('value', { waitUntilFirstUpdate: true })
  async handleValueChange() {
    await this.updateComplete;
    this.formControlController.updateValidity();
  }

  /** Sets focus on the input. */
  focus(options?: FocusOptions) {
    this.input.focus(options);
  }

  /** Removes focus from the input. */
  blur() {
    this.input.blur();
  }

  /** Selects all the text in the input. */
  select() {
    this.input.select();
  }

  /** Sets the start and end positions of the text selection (0-based). */
  setSelectionRange(
    selectionStart: number,
    selectionEnd: number,
    selectionDirection: 'forward' | 'backward' | 'none' = 'none'
  ) {
    this.input.setSelectionRange(selectionStart, selectionEnd, selectionDirection);
  }

  /** Replaces a range of text with a new string. */
  setRangeText(
    replacement: string,
    start?: number,
    end?: number,
    selectMode: 'select' | 'start' | 'end' | 'preserve' = 'preserve'
  ) {
    const selectionStart = start ?? this.input.selectionStart!;
    const selectionEnd = end ?? this.input.selectionEnd!;

    this.input.setRangeText(replacement, selectionStart, selectionEnd, selectMode);

    if (this.value !== this.input.value) {
      this.value = this.input.value;
    }
  }

  /** Displays the browser picker for an input element (only works if the browser supports it for the input type). */
  showPicker() {
    if ('showPicker' in HTMLInputElement.prototype) {
      this.input.showPicker();
    }
  }

  /** Increments the value of a numeric input type by the value of the step attribute. */
  stepUp() {
    if (this.#numericStrategy.noStepAlign) {
      const { max, step, valueAsNumber } = this;

      // Needed because the input could be empty. In this case, valueAsNumber is NaN
      const usedInitialValue = Number.isNaN(valueAsNumber) ? 0 : valueAsNumber;
      const usedMin = typeof this.min === 'string' ? parseFloat(this.min) : this.min;
      const usedMax = typeof max === 'string' ? parseFloat(max) : max;
      const usedStep = (typeof step === 'undefined' || step === null || step === 'any') ? 1 : typeof step === 'number' ? step : parseFloat(step);

      let wantedNextValue = usedInitialValue + usedStep;

      if (typeof usedMax === 'number' && usedMax < wantedNextValue) {
        wantedNextValue = usedMax;
      } else if (typeof usedMin === 'number' && usedMin > wantedNextValue) {
        wantedNextValue = usedMin;
      }

      const finalStringValue = this.#isNumberFormattingEnabled()
        ? this.#formatNumber(wantedNextValue)
        : wantedNextValue.toString();

      this.input.value = finalStringValue;

      if (this.value !== this.input.value) {
        this.value = this.input.value;
      }
      return;
    }
    this.input.stepUp();
    if (this.value !== this.input.value) {
      this.value = this.input.value;
    }
  }

  /** Decrements the value of a numeric input type by the value of the step attribute. */
  stepDown() {
    if (this.#numericStrategy.noStepAlign) {
      const { min, max, step, valueAsNumber } = this;

      // Needed because the input could be empty. In this case, valueAsNumber is NaN
      const usedInitialValue = Number.isNaN(valueAsNumber) ? 0 : valueAsNumber;
      const usedMin = typeof min === 'string' ? parseFloat(min) : min;
      const usedMax = typeof max === 'string' ? parseFloat(max) : max;
      const usedStep = (typeof step === 'undefined' || step === null || step === 'any') ? 1 : typeof step === 'number' ? step : parseFloat(step);

      let wantedNextValue = usedInitialValue - usedStep;
      
      if (typeof usedMin === 'number' && usedMin > wantedNextValue) {
        wantedNextValue = usedMin;
      } else if (typeof usedMax === 'number' && usedMax < wantedNextValue) {
        wantedNextValue = usedMax;
      }

      const finalStringValue = this.#isNumberFormattingEnabled()
        ? this.#formatNumber(wantedNextValue)
        : wantedNextValue.toString();

      this.input.value = finalStringValue;

      if (this.value !== this.input.value) {
        this.value = this.input.value;
      }
      return;
    }
    this.input.stepDown();
    if (this.value !== this.input.value) {
      this.value = this.input.value;
    }
  }

  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    return this.input.checkValidity();
  }

  /** Gets the associated form, if one exists. */
  getForm(): HTMLFormElement | null {
    return this.formControlController.getForm();
  }

  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    return this.input.reportValidity();
  }

  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(message: string) {
    this.input.setCustomValidity(message);
    this.formControlController.updateValidity();
  }

  #formatNumber(value: number) {
    return formatNumber(value, this.step, {
      maximumFractionDigits: this.maxFractionDigits,
      minimumFractionDigits: this.minFractionDigits,
      ...this.numberFormatterOptions,
    });
  }

  #isNumberFormattingEnabled() {
    const {
      numberFormatterOptions,
      maxFractionDigits,
      minFractionDigits,
      step,
    } = this;

    const hasMaxFractionDigits = typeof maxFractionDigits !== 'undefined' && !Number.isNaN(maxFractionDigits);
    const hasMinFractionDigits = typeof minFractionDigits !== 'undefined' && !Number.isNaN(minFractionDigits);

    // Easy checks first: If we have a min or max fraction digit, proceed
    if (hasMaxFractionDigits || hasMinFractionDigits) {
      return true;
    }
    
    // Check if there are any options that where provided via formatter options
    if (typeof numberFormatterOptions === 'object') {
      return true;
    }

    // As a last fallback, see if the step has a decimal value
    // If it has, we should format according to the steps amount of fraction digits
    const stepToUse = step === 'any' || !step ? 1 : +step;
    const stepFractionDigits = stepToUse.toString().split('.')[1]?.length || 0;

    return stepFractionDigits > 0;
  }

  render() {
    const hasLabelSlot = this.hasSlotController.test('label');
    const hasHelpTextSlot = this.hasSlotController.test('help-text');
    const hasPrefixSlot = this.hasSlotController.test('prefix');
    const hasSuffixSlot = this.hasSlotController.test('suffix');
    const hasLabel = this.label ? true : !!hasLabelSlot;
    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;
    const hasClearIcon = this.clearable && !this.disabled && !this.readonly;
    const isClearIconVisible = hasClearIcon && (typeof this.value === 'number' || this.value.length > 0);

    return html`
      <div
        part="form-control"
        class=${classMap({
          'form-control': true,
          'form-control--small': this.size === 'small',
          'form-control--medium': this.size === 'medium',
          'form-control--large': this.size === 'large',
          'form-control--has-label': hasLabel,
          'form-control--has-help-text': hasHelpText,
          'form-control--has-prefix': hasPrefixSlot,
          'form-control--has-suffix': hasSuffixSlot
        })}
      >
        <label
          part="form-control-label"
          class="form-control__label"
          for="input"
          aria-hidden=${hasLabel ? 'false' : 'true'}
        >
          <slot name="label">${this.label}</slot>
        </label>

        <div part="form-control-input" class="form-control-input">
          <div
            part="base"
            class=${classMap({
              input: true,

              // Sizes
              'input--small': this.size === 'small',
              'input--medium': this.size === 'medium',
              'input--large': this.size === 'large',

              // States
              'input--standard': !this.readonly,
              'input--readonly': this.readonly,
              'input--disabled': this.disabled,
              'input--focused': this.hasFocus,
              'input--empty': !this.value,
              'input--no-spin-buttons': this.noSpinButtons
            })}
          >
            <span part="prefix" class="input__prefix">
              <slot name="prefix"></slot>
            </span>

            <input
              part="input"
              id="input"
              class="input__control"
              type=${this.type === 'password' && this.passwordVisible ? 'text' : this.type}
              title=${this.title /* An empty title prevents browser validation tooltips from appearing on hover */}
              name=${ifDefined(this.name)}
              ?disabled=${this.disabled}
              ?readonly=${this.readonly}
              ?required=${this.required}
              placeholder=${ifDefined(this.placeholder)}
              minlength=${ifDefined(this.minlength)}
              maxlength=${ifDefined(this.maxlength)}
              min=${ifDefined(this.min)}
              max=${ifDefined(this.max)}
              step=${ifDefined(!this.#numericStrategy.noStepValidation ? this.step as number : 'any')}
              .value=${live(this.value)}
              autocapitalize=${ifDefined(this.autocapitalize)}
              autocomplete=${ifDefined(this.autocomplete)}
              autocorrect=${ifDefined(this.autocorrect)}
              ?autofocus=${this.autofocus}
              spellcheck=${this.spellcheck}
              pattern=${ifDefined(this.pattern)}
              enterkeyhint=${ifDefined(this.enterkeyhint)}
              inputmode=${ifDefined(this.inputmode)}
              aria-describedby="help-text"
              @change=${this.handleChange}
              @input=${this.handleInput}
              @invalid=${this.handleInvalid}
              @keydown=${this.handleKeyDown}
              @focus=${this.handleFocus}
              @blur=${this.handleBlur}
            />

            ${isClearIconVisible
              ? html`
                  <button
                    part="clear-button"
                    class="input__clear"
                    type="button"
                    aria-label=${this.localize.term('clearEntry')}
                    @click=${this.handleClearClick}
                    tabindex="-1"
                  >
                    <slot name="clear-icon">
                      <syn-icon name="x-circle-fill" library="system"></syn-icon>
                    </slot>
                  </button>
                `
              : ''}
            ${this.passwordToggle && !this.disabled
              ? html`
                  <button
                    part="password-toggle-button"
                    class="input__password-toggle"
                    type="button"
                    aria-label=${this.localize.term(this.passwordVisible ? 'hidePassword' : 'showPassword')}
                    @click=${this.handlePasswordToggle}
                    tabindex="-1"
                  >
                    ${this.passwordVisible
                      ? html`
                          <slot name="show-password-icon">
                            <syn-icon name="eye-slash" library="system"></syn-icon>
                          </slot>
                        `
                      : html`
                          <slot name="hide-password-icon">
                            <syn-icon name="eye" library="system"></syn-icon>
                          </slot>
                        `}
                  </button>
                `
              : ''}

            <span part="suffix" class="input__suffix">
              <slot name="suffix"></slot>
            </span>

            ${this.type === 'number' && !this.noSpinButtons
              ? html`
              <div part="stepper" class="input__number-stepper">
                <button
                  part="decrement-number-stepper"
                  class="input__number-stepper-button"
                  type="button"
                  ?disabled=${this.isDecrementDisabled()}
                  aria-hidden="true"
                  ${longPress({ start: () => this.handleStepDown(), end: () => this.handleChange()})}
                  tabindex="-1"
                >
                  <slot name="decrement-number-stepper">
                    <syn-icon name="indeterminate" library="system"></syn-icon>
                  </slot>
                </button>
                <syn-divider class="input__number-divider" part="divider" vertical></syn-divider>
                <button
                  part="increment-number-stepper"
                  class="input__number-stepper-button"
                  type="button"
                  ?disabled=${this.isIncrementDisabled()}
                  aria-hidden="true"
                  ${longPress({ start: () => this.handleStepUp(), end: () => this.handleChange()})}
                  tabindex="-1"
                >
                  <slot name="increment-number-stepper">
                    <syn-icon name="add" library="system"></syn-icon>
                  </slot>
                </button>
              </div>
                `
            : ''}
          </div>
        </div>

        <div
          part="form-control-help-text"
          id="help-text"
          class="form-control__help-text"
          aria-hidden=${hasHelpText ? 'false' : 'true'}
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </div>
    `;
  }
}
